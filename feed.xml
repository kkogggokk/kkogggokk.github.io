<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://jamesu.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jamesu.dev/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2021-02-09T19:57:43+09:00</updated><id>https://jamesu.dev/</id><title type="html">Jamesu Devlog</title><subtitle>Dev Blog by James Minsu Jeon</subtitle><author><name>jamesujeon</name><email>jamesujeon@gmail.com</email></author><entry><title type="html">GitHub 커밋 그래프(GitHub Contributions Graph) 보여주기</title><link href="https://jamesu.dev/posts/2021/02/09/showing-github-contributions-graph/" rel="alternate" type="text/html" title="GitHub 커밋 그래프(GitHub Contributions Graph) 보여주기" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/09/showing-github-contributions-graph</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/09/showing-github-contributions-graph/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;https://ghchart.rshah.org/jamesujeon&quot;/&amp;gt;&lt;/code&gt; 한줄로 나의 &lt;strong&gt;잔디&lt;/strong&gt;를 표현할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;https://ghchart.rshah.org/219138/jamesujeon&quot;/&amp;gt;&lt;/code&gt;와 같이 &lt;strong&gt;기준 색&lt;/strong&gt;을 지정할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;github-contributions-graph&quot;&gt;GitHub Contributions Graph&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub를 사용하는 사람이라면 누구나 한번쯤 위와 같은 &lt;strong&gt;GitHub Contributions Graph&lt;/strong&gt;를 본 적이 있을 것이다.
그리고 많은 개발자가 이 초록색 네모(일명 잔디)를 채우기 위해 하루하루 코딩을 한다.
이렇게 채운 네모는 코딩을 더 열심히 하게 자극을 주는 동기부여가 된다.&lt;/p&gt;

&lt;p&gt;GitHub Contributions Graph를 많이 채웠으면 그것을 누군가에게 자랑을 하고 싶기도 하고,
스스로 보며 뿌듯함을 느끼고 싶기도 할 것이다.
그러기 위해 블로그에 그 그래프를 연동하기도 하는데, 최근에 괜찮은 오픈 소스를 발견해 그것을 이용해
&lt;a href=&quot;https://jamesu.dev/about&quot; target=&quot;_blank&quot;&gt;About&lt;/a&gt; 페이지를 꾸몄다.&lt;/p&gt;

&lt;h2 id=&quot;github-chart-api-연동&quot;&gt;Github Chart API 연동&lt;/h2&gt;

&lt;p&gt;그래프를 보여주기 위해 사용한 오픈 소스는 &lt;a href=&quot;https://github.com/akerl/githubchart&quot; target=&quot;_blank&quot;&gt;Github Chart API&lt;/a&gt;라
불리는 &lt;strong&gt;그래프 이미지 생성 API&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;Github Chart API는 GitHub 계정으로부터 Contributions 데이터를 불러와 이미지 파일을 생성하고 호스팅을 통해 이미지 파일을 제공해준다.
이미지 파일은 SVG이기 때문에 화면 크기에 맞춰 적절하게 보여질 수 있으며, 원하는 기준 색을 지정해 네모(일명 잔디)의 색을 바꿀 수 있다.&lt;/p&gt;

&lt;p&gt;사용법은 정말 간단하다.&lt;br /&gt;
다음 코드와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; 요소의 이미지 파일 경로로
&lt;strong&gt;호스팅 사이트(https://ghchart.rshah.org) 뒤에 GitHub 계정명을 덧붙인 경로&lt;/strong&gt;를 전달하면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ghchart.rshah.org/jamesujeon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;앞서 얘기한 것처럼 &lt;strong&gt;기준 색&lt;/strong&gt;을 지정하고 싶다면,
다음 코드와 같이 &lt;strong&gt;GitHub 계정명 앞에 16진수 색상 코드&lt;/strong&gt;를 덧붙이면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ghchart.rshah.org/219138/jamesujeon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 코드를 적용한 &lt;a href=&quot;https://jamesu.dev/about&quot; target=&quot;_blank&quot;&gt;About&lt;/a&gt; 페이지의 이미지는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_2.png&quot; alt=&quot;Figure 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 이미지는 현재의 GitHub 데이터를 기준으로 하기 때문에 최신 이미지가 유지될 수 있다.
물론, 이미지 파일이 캐싱되어 이전 상태의 이미지가 보일 수 있으니 그런 경우 캐시를 제거하고 확인해 봐야 한다.&lt;/p&gt;

&lt;p&gt;Github Chart API에서 생성하는 이미지 파일은 &lt;a href=&quot;https://github.com/akerl/githubchart&quot; target=&quot;_blank&quot;&gt;GithubChart&lt;/a&gt;라 하는
다른 오픈 소스로부터 생성된 것이다.
만약, 이미지 파일을 생성하는 로직이 궁금하거나 해당 루비 라이브러리를 직접 연동하고 싶은 경우, GithubChart를 참고하면 도움이 될 것이다.&lt;/p&gt;

&lt;p&gt;얼른 한줄의 코드를 통해 자신의 GitHub Contributions Graph를 뽐내도록 하자! 😎&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="github" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 27: Closure에서의 메모리 누수 제거하기</title><link href="https://jamesu.dev/posts/2021/02/05/til-27-removing-memory-leaks-in-closure/" rel="alternate" type="text/html" title="TIL 27: Closure에서의 메모리 누수 제거하기" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/05/til-27-removing-memory-leaks-in-closure</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/05/til-27-removing-memory-leaks-in-closure/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Retain Cycle이 아닌 &lt;strong&gt;불필요한 메모리 점유&lt;/strong&gt;도 일종의 메모리 누수라고 생각한다.&lt;/li&gt;
  &lt;li&gt;Closure에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; 캡처를 할 때는 타이밍에 주의하자.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;기본기&lt;/strong&gt;는 항상 중요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;숨겨져-있는-메모리-누수&quot;&gt;숨겨져 있는 메모리 누수&lt;/h2&gt;

&lt;p&gt;Xcode는 현재 화면에서의 메모리 누수를 확인할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug Memory Graph&lt;/code&gt; 기능을 제공한다.
이를 통해 메모리에 할당된 데이터 간의 그래프를 볼 수 있고, 그 관계를 통해 누가 누구와 연결되었는지 알 수 있다.
그리고 Retain Cycle이 발생한 경우, 바로 표시해주어 한눈에 그것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;하지만, Retain Cycle 표시가 없다고 안심할 수 있는 것은 아니다.&lt;br /&gt;
실제 메모리가 할당된 목록을 보면, 현재 화면에서 존재하면 안 되는 데이터가 남아있는 것이 확인될 수도 있다.
논리적으로 해당 데이터가 남아 있으면 안 되지만 목록에 나타난다면,
&lt;strong&gt;그것은 Retain Cycle은 아니지만 앱이 실행되는 내내 메모리를 점유하고 있기에 불필요한 메모리 점유로 간주한다&lt;/strong&gt;.
그래서 나는 이것도 또 하나의 메모리 누수라고 생각한다.&lt;/p&gt;

&lt;h2 id=&quot;closure-사용할-때-주의하기&quot;&gt;Closure 사용할 때 주의하기&lt;/h2&gt;

&lt;p&gt;사내 프로젝트에서도 그 숨겨진 메모리 누수가 발견되었는데, 원인을 찾기 매우 어려웠다.
그래도 Xcode의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug Memory Graph&lt;/code&gt; 기능을 통해 연결 관계를 추적하다보니 Closure를 사용하는 부분이 의심이 됐다.
그리고 몇가지 실험을 통해 Closure에서 객체를 붙잡고 있어 메모리 누수가 발생한 것을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;개인적으로 Swift에서 Closure를 사용할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;의 프로퍼티나 메소드를 사용하는 경우, 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; 캡처를 하는 습관이 몸에 배어 있다.
그래서 별 탈이 없이 사용한 줄 알았는데 함정이 있었다.&lt;/p&gt;

&lt;p&gt;기존 코드는 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak self&lt;/code&gt; 캡처를 했었다.&lt;br /&gt;
(개인적으로 사용한 코드이기 때문에 Closure 부분만 집중하면 된다.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asyncAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;refreshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;하지만, 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Capture List&lt;/code&gt;라는 개념에 대해 대략적으로만 알고 사용했었고, 그 결과 메모리 누수로 이어졌던 것이다.
저렇게 캡처를 하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;addAction&lt;/code&gt; 메소드를 호출해 Closure를 정의하는 시점에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; 캡처되지 않고,
그 안의 &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncAfter&lt;/code&gt; 메소드를 호출할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak self&lt;/code&gt; 캡처를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;가 사용되기 때문에 결국에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt; 캡처가 된 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Capture List&lt;/code&gt;는 Closure를 &lt;strong&gt;정의하는 시점에 캡처&lt;/strong&gt;를 하는 것이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; 캡처를 하고 싶다면, 정의 시점에 캡처를 해야 한다.
따라서, 다음과 같이 수정을 하면 Closure에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;를 붙잡는 현상이 사라진다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asyncAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;refreshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;정말 간단한 해결책이지만, Swift 언어에 대한 기본기가 부족해 발생했던 문제점이었다.&lt;/p&gt;

&lt;p&gt;이렇게 고생을 했으니 앞으로는 까먹지 않고 숨겨진 메모리 누수를 막을 수 있을 것 같다.&lt;br /&gt;
다시 한번 느끼지만, &lt;strong&gt;기본기&lt;/strong&gt;는 항상 중요하다. 🤔&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="swift" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 26: Xcode 파일 Header Comment 통일</title><link href="https://jamesu.dev/posts/2021/01/28/til-26-making-xcode-file-header-comment-consistent/" rel="alternate" type="text/html" title="TIL 26: Xcode 파일 Header Comment 통일" /><published>2021-01-28T00:00:00+09:00</published><updated>2021-01-28T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/28/til-26-making-xcode-file-header-comment-consistent</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/28/til-26-making-xcode-file-header-comment-consistent/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode는 파일 Header Comment 포맷을 정의하는 방법을 제공한다.&lt;/li&gt;
  &lt;li&gt;파일 Header Comment 포맷을 통일해 프로젝트의 일관성을 유지하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;파일-header-comment의-일관성을-유지하자&quot;&gt;파일 Header Comment의 일관성을 유지하자&lt;/h2&gt;

&lt;p&gt;언제나 Naming을 열심히 고민하는 개발자들에게 &lt;strong&gt;일관성&lt;/strong&gt; 유지는 중요한 마음가짐이자 규칙이다.&lt;br /&gt;
파일을 생성할 때마다 상단에 추가되는 Header Comment도 그것의 예외가 될 수 없다.&lt;/p&gt;

&lt;p&gt;기본적으로 Xcode에서 제공하는 파일 Header Comment 포맷에는 파일명, 프로젝트명, Copyright, 작성자 등이 포함된다.
일반적으로 저것으로 충분할 것으로 보이지만, 사내에서 여러 개발자가 파일을 생성하다보면 일관성이 깨지는 상황이 발생할 수 있다.
그것은 특히 작성자의 아이디가 알 수 없는 이름으로 되어 있거나 파일명을 수시로 바꾸는 경우다.&lt;/p&gt;

&lt;p&gt;개발 환경을 설정할 때 임의의 애플 아이디로 로그인 해서 개발을 시작하거나 사내에서 쓰지 않는 자신만의 아이디를 쓰는 등과 같이
직접 확인하지 않으면 일관성이 깨지고 중구난방이 될 수 있다.
또한, 파일명이 이상해 리팩토링을 통해 고치거나 하면, Header Comment도 같이 바꾸는 게 정석이지만 빼먹고 변경하지 않는 일이 허다하다.
후자의 경우는 코드 리뷰나 개발자 스스로가 신경써서 관리해야 하겠지만, 전자의 경우는 사내 파일 Header Comment 규칙을 바꾸는 것도 한 방법이 될 수 있다.&lt;/p&gt;

&lt;p&gt;협업을 하다 보면 하나의 파일을 여러 개발자가 건드리는 경우가 많으므로, 굳이 작성자를 명시할 필요가 없다.
또한, 커밋 내역을 통해 누가 무엇을 어떻게 수정했는지 파악할 수 있다.
따라서 작성자를 파일 Header Comment에 포함시킬 필요가 없었고, 일관성을 유지하기 좋은 방향으로 포맷을 수정할 필요가 생겼다.&lt;/p&gt;

&lt;p&gt;다행히 Xcode에 파일 Header Comment 포맷을 변경할 수 있는 방법이 다양하게 존재했고,
사내 프로젝트를 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;xcshareddata&lt;/code&gt;에 보관하는 방식으로 다른 개발자에게도 동일한 규칙을 적용시킬 수 있었다.
&lt;a href=&quot;https://help.apple.com/xcode/mac/9.0/index.html?localePath=en.lproj#/dev7fe737ce0&quot; target=&quot;_blank&quot;&gt;이 곳&lt;/a&gt;에서
포맷에 적용할 수 있는 다양한 매크로를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;어찌보면 사소한 일이지만, 이 사소한 일이 다양한 인적 실수를 방지하고, 퀄리티를 높이는 등 좋은 장점이 있다고 생각한다.
얼른 다른 프로젝트에도 적용해야겠다. 😎&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="xcode" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 25: HTML 태그가 포함된 텍스트 변환하기</title><link href="https://jamesu.dev/posts/2021/01/22/til-25-converting-text-including-html-tags/" rel="alternate" type="text/html" title="TIL 25: HTML 태그가 포함된 텍스트 변환하기" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/22/til-25-converting-text-including-html-tags</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/22/til-25-converting-text-including-html-tags/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTML 태그가 포함된 텍스트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSAttributedString&lt;/code&gt; 클래스를 이용해 일반 텍스트로 변환할 수 있다.&lt;/li&gt;
  &lt;li&gt;텍스트 변환 후에는 적용되었던 텍스트 스타일이 초기화되므로 재설정 해줘야 한다.&lt;/li&gt;
  &lt;li&gt;요구사항에 따라 깔끔하게 텍스트 스타일을 유지하며 변환하는 것이 힘들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;불편한-ios의-html-텍스트-변환&quot;&gt;불편한 iOS의 HTML 텍스트 변환&lt;/h2&gt;

&lt;p&gt;이번에 사내 앱 프로젝트에서 HTML 태그가 포함된 텍스트를 변환해 텍스트 스타일을 적용하는 요구사항이 생겼다.
그래서 바로 리서치를 해보니, 안드로이드에서 간단히 &lt;code class=&quot;highlighter-rouge&quot;&gt;Html&lt;/code&gt; 클래스를 이용하는 것처럼,
iOS에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSAttributedString&lt;/code&gt; 클래스를 이용해 간단히 처리할 수 있나 했더니 오산이었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSAttributedString&lt;/code&gt; 클래스를 이용해 변환하면, 기존에 적용되었던 폰트 등의 &lt;strong&gt;텍스트 스타일이 모두 초기화&lt;/strong&gt;되는 것이었다.
요구사항에서 언급된 HTML 태그로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;i&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;u&amp;gt;&lt;/code&gt; 등과 같은 볼드, 이탤릭, 밑줄 처리를 하는 텍스트 스타일이었다.
그래서 텍스트 변환 후에 일일이 각 텍스트 스타일이 적용된 부분을 찾아 폰트를 변경하는 처리를 해야 했는데,
생각만큼 쉽게 모든 스타일이 적용되지 않았다.&lt;/p&gt;

&lt;p&gt;또 다른 방법으로는 &lt;strong&gt;기존 HTML 태그가 포함된 텍스트를 원하는 폰트, 글자 색깔, 글자 크기 등의 값을 설정할 수 있는 태그로 감싸고, 그것을 변환&lt;/strong&gt;하는 것이었다.
만약, 각 텍스트 스타일마다 폰트를 다르게 적용하는 처리가 필요하다면 더 복잡할 수 있다.
다행히 현재 프로젝트에서는 애플 시스템 폰트를 기본으로 사용하고 있기 때문에 문제가 없었다.&lt;/p&gt;

&lt;p&gt;우여곡절 끝에 요구사항을 구현할 가닥이 어느 정도 보였지만, 아직 실험할 것이 남았다.
그래도 잘 마무리 될 것 같은 생각에 안도감이 들었다.
많이 쓸만한 기능이라 iOS에서 잘 준비되어 있었을 것 같았는데 생각보다 구현이 불편해 많이 당황스러웠다.
이런 이슈를 경험할 기회가 생겨서 다행인 것 같다. 😂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="ui" /><category term="html" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 24: 무한 스크롤을 위한 페이징 API 설계</title><link href="https://jamesu.dev/posts/2021/01/20/til-24-defining-pagination-api-for-infinite-scroll/" rel="alternate" type="text/html" title="TIL 24: 무한 스크롤을 위한 페이징 API 설계" /><published>2021-01-20T00:00:00+09:00</published><updated>2021-01-20T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/20/til-24-defining-pagination-api-for-infinite-scroll</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/20/til-24-defining-pagination-api-for-infinite-scroll/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;무한 스크롤은 페이지 번호를 이용한 고전적인 페이징 기법과 달리 &lt;strong&gt;무한하게 스크롤을 내리는 UX&lt;/strong&gt;에 적합하다.&lt;/li&gt;
  &lt;li&gt;무한 스크롤 페이징 API 설계 시, &lt;strong&gt;정렬 조건&lt;/strong&gt;을 함께 서버에 전달해야 한다.&lt;/li&gt;
  &lt;li&gt;누락되는 항목까지 고려한다면, 더 복잡해질 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;무한-스크롤infinite-scroll이란&quot;&gt;무한 스크롤(Infinite scroll)이란?&lt;/h2&gt;

&lt;p&gt;일반적으로 웹사이트의 게시판에서 쉽게 접할 수 있는 페이징 기법은 “1, 2, 3, …“과 같이 목록의 하단에
페이지 번호가 있고 한 페이지에 특정 갯수가 목록에 보여지는 방식일 것이다.&lt;/p&gt;

&lt;p&gt;이와 달리 &lt;strong&gt;무한 스크롤(Infinite scroll)&lt;/strong&gt;이라 불리는 페이징 기법은 페이지 번호가 따로 없고,
아래로 스크롤하다가 끝에 도달하면 다음 페이지의 목록을 현재 목록에 추가하여 목록을 연장하는 방식이다.
그래서 마치 무한하게 스크롤을 내릴 수 있다하여 무한 스크롤이라 불린다.&lt;/p&gt;

&lt;p&gt;페이지 번호를 사용하는 페이징 기법을 사용할 지, 무한 스크롤을 사용할 지는 기획에 따라 다르며,
컨텐츠의 종류에 따라 적절한 UX를 선택해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;사내-페이징-api의-문제점&quot;&gt;사내 페이징 API의 문제점&lt;/h2&gt;

&lt;p&gt;이번에 신규 모바일 프로젝트를 진행하며, 대량의 목록을 조회할 수도 있는 화면에서 페이징 기법을 사용할 필요가 있었다.
기존의 웹 솔루션을 앱으로 만드는 것이라 서버 팀에서는 웹 API를 그대로 활용하여 모바일 API로 전달해주었으나,
여러가지 문제가 많아 수정을 계속 요청하는 상태였다.&lt;/p&gt;

&lt;p&gt;기존 웹 솔루션에서는 게시판처럼 고전적인 페이징 기법을 사용하고 있었고,
모바일 프로젝트의 화면에서는 무한 스크롤을 기획으로 요구했기 때문에 해당 API를 그대로 사용할 수 없었다.
더군다나 서버 팀의 일정이 바쁜 탓에 설계를 할 시간이 없었고, 가장 적절한 무한 스크롤 기법을 찾기 위해 리서치를 진행했다.&lt;/p&gt;

&lt;h2 id=&quot;무한-스크롤-페이징-api-설계-시-정렬-조건에-유의하자&quot;&gt;무한 스크롤 페이징 API 설계 시, 정렬 조건에 유의하자&lt;/h2&gt;

&lt;p&gt;리서치된 내용을 조합하여 최선을 찾으려 노력했으며, 페이징 API 호출 시 어떤 정보를 서버에 넘길 지가 관건이었다.&lt;/p&gt;

&lt;p&gt;일반적으로는 생성된 날짜를 기준으로 정렬하기 때문에 기준이 되는 항목의 생성된 날짜를 넘기는 식으로 구현이 가능하지만,
해당 프로젝트에는 &lt;strong&gt;정렬 기준이 다소 달랐기 때문에&lt;/strong&gt; 다르게 적용할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;해당 프로젝트의 정렬 기준은 화면마다 다를 수 있어 넘겨야 하는 정보가 그때그때 달랐으며,
페이징 도중에도 언제든지 다음 페이지 항목의 순서가 (데이터로써) 상단으로 땡겨질 수 있기 때문에
누락되는 항목까지 고려해야 할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;결국 어찌저찌 설계를 완료해 서버 팀에 넘겼으나 제대로 적용될 지는 두고 봐야 한다.
예전에는 단순히 주어진 대로 누락될 수 있는 가능성을 무시하고 고전적인 페이징 기법을 사용해 개발했지만,
이번에는 제대로 개발하고자 시도를 해보았다.
추후 좀 더 다듬어 Best Practice가 되도록 만들어야겠다. 👨🏻‍🔧&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ui" /><category term="api" /><category term="rest" /><category term="pagination" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 23: CocoaPods로 인한 Warning 제거</title><link href="https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods/" rel="alternate" type="text/html" title="TIL 23: CocoaPods로 인한 Warning 제거" /><published>2021-01-18T00:00:00+09:00</published><updated>2021-01-18T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CocoaPods로 외부 라이브러리 설치 후 생기는 Warning은 &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; 훅으로 쉽게 제거할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;신경-쓰이는-warning-제거하기&quot;&gt;신경 쓰이는 Warning 제거하기&lt;/h2&gt;

&lt;p&gt;개인적으로 Xcode에 노란색 Warning이 보이면 굉장히 거슬려서 가능하면 모두 제거하려고 하는 편이다.
어떤 종류의 Warning이라도 검색을 통해 기필코 제거하려 한다.
Warning이 치명적인 버그를 낳을 수도 있지만, 뭔가 잘못 코딩한 것 같은 느낌을 들게 하기 때문이다.&lt;/p&gt;

&lt;p&gt;사내에서 외부 라이브러리 연동으로 CocoaPods를 주로 사용하는데,
언제부턴가 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;로 외부 라이브러리를 설치하고 난 후에 Xcode에 몇몇 Warning이 뜨기 시작했다.&lt;/p&gt;

&lt;p&gt;치명적인 Warning은 아니기 때문에 Xcode에서 제공하는 설정 값 갱신 기능을 사용하면 쉽게 제거할 수 있다.
하지만, 다른 개발자가 프로젝트를 이어 받아 진행할 수도 있고, 외부 라이브러리 설치 시마다 거슬릴 수 있으므로
설정 값 갱신조차 필요하지 않도록 하고 싶었다.&lt;/p&gt;

&lt;h2 id=&quot;post_install-hook&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; Hook&lt;/h2&gt;

&lt;p&gt;CocoaPods에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt;
&lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#post_install&quot; target=&quot;_blank&quot;&gt;훅&lt;/a&gt;이 존재하는데,
이를 이용하면 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt; 설치 후 수행할 처리&lt;/strong&gt;를 정의할 수 있다.
앞서 발생한 Warning은 외부 라이브러리에 특정 설정 값이 적절하지 않게 세팅되어 발생한 것으로 해당 값을
&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt; 설치 후 적절하게 세팅하도록 처리하면 된다.&lt;/p&gt;

&lt;p&gt;다음과 같은 훅을 추가해 설치된 외부 라이브러리의 &lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED&lt;/code&gt;와
&lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER&lt;/code&gt; 값이 적절하게 세팅되도록 했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;post_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pods_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'YES'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NO'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;노란색 Warning들이 깔끔하게 사라진 것을 보고 아주 만족했다. 🙂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="xcode" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 22: 커스텀 컨테이너 뷰 컨트롤러 개선 2</title><link href="https://jamesu.dev/posts/2021/01/11/til-22-improving-custom-container-view-controller-2/" rel="alternate" type="text/html" title="TIL 22: 커스텀 컨테이너 뷰 컨트롤러 개선 2" /><published>2021-01-11T00:00:00+09:00</published><updated>2021-01-11T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/11/til-22-improving-custom-container-view-controller-2</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/11/til-22-improving-custom-container-view-controller-2/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;커스텀 탭바 컨트롤러를 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;와 유사하도록 구현했다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;의 자식 뷰 컨트롤러 관리 방식의 차이를 이해해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;탭바-컨트롤러-vs-네비게이션-컨트롤러&quot;&gt;탭바 컨트롤러 vs. 네비게이션 컨트롤러&lt;/h2&gt;

&lt;p&gt;이번에도 역시나 요구사항에 맞추기 위해 커스텀 탭바 컨트롤러를 만들기로 했다.&lt;br /&gt;
&lt;a href=&quot;https://jamesu.dev/posts/2021/01/09/til-21-improving-custom-container-view-controller/&quot; target=&quot;_blank&quot;&gt;이전&lt;/a&gt;과 마찬가지로
Root 뷰 생명 주기와 부모-자식 관계 설정의 생명 주기를 신경 쓰며 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;의 리버스 엔지니어링을 시도했다.
헷갈리는 동작도 있었지만, 일부 동작의 경우 커스텀 탭바 컨트롤러와 다를 수 밖에 없기에 인지하고 다른 식으로 구현했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와 달리 미리 다수의 자식 뷰 컨트롤러를 추가해 놓는다.
그래서 자식 뷰 컨트롤러 목록을 세팅한 후에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;addChild&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;removeFromParent&lt;/code&gt; 메소드를 호출할 일이 없었다.&lt;/p&gt;

&lt;p&gt;또한, Root 뷰 생명 주기가 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와는 좀 다른 순서로 호출되었다.
역시나 직접 리버스 엔지니어링을 하길 잘한 것 같다.
예상만으로 구현했다면 뒤늦게 발견해서 고생하며 뒤집었을지도 모른다. 😞&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;의 차이를 계속 비교하며 커스텀 탭바 컨트롤러를 구현했다.
일단 메뉴가 변동되는 경우는 거의 없기 때문에 가장 필요한 부분에 한해서 구현을 진행했다.
필요하면 그때 계속 개선하면 되지 않을까..?&lt;/p&gt;

&lt;h2 id=&quot;다음은-스플릿-뷰-컨트롤러&quot;&gt;다음은.. 스플릿 뷰 컨트롤러..?&lt;/h2&gt;

&lt;p&gt;커스텀 컨테이너 뷰 컨트롤러를 하나하나 구현하고 사용해보니 잘 동작할 때 아주 뿌듯하다.
뭔가 일반적인 뷰를 구현한 것과는 달리 좀 더 유용한 것을 만든 기분이 든다.&lt;/p&gt;

&lt;p&gt;또 다른 컨테이너 뷰 컨트롤러로 스플릿 뷰 컨트롤러가 있다.
아이패드에서 자주 사용하는 컨트롤러인데, 아직 사내에서는 쓸 일이 없다…
언젠가 커스텀 스플릿 뷰 컨트롤러를 만들 기회도 생기지 않을까?&lt;/p&gt;

&lt;p&gt;그 밖에도 자식 뷰 컨트롤러를 담는 것이라면, 모두 컨테이너 뷰 컨트롤러가 될 수 있다.
이번에 좀 더 공부해서 &lt;strong&gt;커스텀 컨테이너 뷰 컨트롤러&lt;/strong&gt;를 구현하기 위한 분석을 많이 해보고 글로 정리해 봐야겠다. 🔥&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="ui" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 21: 커스텀 컨테이너 뷰 컨트롤러 개선</title><link href="https://jamesu.dev/posts/2021/01/09/til-21-improving-custom-container-view-controller/" rel="alternate" type="text/html" title="TIL 21: 커스텀 컨테이너 뷰 컨트롤러 개선" /><published>2021-01-09T00:00:00+09:00</published><updated>2021-01-09T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/09/til-21-improving-custom-container-view-controller</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/09/til-21-improving-custom-container-view-controller/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;기존 커스텀 네비게이션 컨트롤러가 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와 유사하도록 개선을 진행했다.&lt;/li&gt;
  &lt;li&gt;아직 만족스럽지 않아 개선이 더 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기존-커스텀-네비게이션-컨트롤러의-문제점&quot;&gt;기존 커스텀 네비게이션 컨트롤러의 문제점&lt;/h2&gt;

&lt;p&gt;요구사항에 따라 개발을 하다 보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;에서 제공하는 컨테이너 뷰 컨트롤러만으로는 만족스럽게 결과물이 나오지 않는 경우가 있다.
또한, UI나 애니메이션 등을 완전히 커스텀하고 싶을 때도 기존 라이브러리로는 한계가 있을 수 있다.
&lt;strong&gt;결국에는 직접 커스텀 컨테이너 뷰 컨트롤러를 만드는 것이 오히려 마음이 편하다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;그렇게 해서 직접 만들어서 사용하던 커스텀 네비게이션 컨트롤러가 있었는데,
현재 사용하는 데는 문제점이 없었지만 미래에 발생할 수 있는 문제점이 존재했다.
그것은 바로 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와 동작이 완전히 일치하지 않는다는 점&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;물론, 현재 사용하는 것에 문제점이 없었다는 말은 특정 동작만 사용했기 때문인데,
이것은 추후 유지보수를 진행할 때 찾기 어려운 버그가 생길 수 있다.
그렇게 개선의 필요성을 느끼게 됐고, 커스텀 컨테이너 뷰 컨트롤러를 위한 분석을 진행했다.&lt;/p&gt;

&lt;h2 id=&quot;개선-방향&quot;&gt;개선 방향&lt;/h2&gt;

&lt;p&gt;기존에 반영한 생명 주기는 많이 사용하고 있는 뷰 컨트롤러의 기본적인 Root 뷰 생명 주기이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillAppear&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidAppear&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillDisappear&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidDisappear&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해당 메소드들을 자식 뷰 컨트롤러가 추가 또는 제거되는 시점에 따라 호출하도록 구현했었다.&lt;/p&gt;

&lt;p&gt;하지만, 실제로 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;에서 제공하는 네비게이션 컨트롤러와 호출되는 순서가 일치하지 않았기에 동일한 순서가 되도록 수정을 진행했다.
애니메이션이 포함되어 있는 경우 시점을 잘 지정해 구현해야 했다.
시점이 어긋나면, 자식 뷰 컨트롤러의 생명 주기를 구현할 때 예상치 못한 순서로 동작할 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 뷰 컨트롤러는 기본적으로 부모-자식 관계를 설정해서 활용할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; 프로퍼티가 존재했는데,
나는 별도로 부모를 나타내는 프로퍼티와 &lt;code class=&quot;highlighter-rouge&quot;&gt;viewControllers&lt;/code&gt; 프로퍼티를 정의해 사용하고 있었다.
이것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;addChild&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;removeFromParent&lt;/code&gt; 메소드를 호출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; 프로퍼티를 활용하도록 수정했다.&lt;/p&gt;

&lt;p&gt;또한, Root 뷰 생명 주기와 부모-자식 관계 설정의 생명 주기를 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와 맞추기 위한 작업을 추가로 진행했다.
아무래도 iOS 개발자는 기본으로 제공하는 생명 주기에 익숙할 터이니 그것의 생명 주기에 맞추는 게 적합하다고 생각했다.&lt;/p&gt;

&lt;p&gt;마지막으로 Apple Developer 문서에서
&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621387-beginappearancetransition&quot; target=&quot;_blank&quot;&gt;뷰 생명 주기 메소드를 직접 호출하지 말라&lt;/a&gt;고 하고 있어,
해당 메소드들을 &lt;code class=&quot;highlighter-rouge&quot;&gt;beginAppearanceTransition&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;endAppearanceTransition&lt;/code&gt;를 호출하도록 수정했다.&lt;/p&gt;

&lt;p&gt;아직 커스텀 컨테이너 뷰 컨트롤러에 대한 분석이 다 된 것 같지 않아 만족스럽지 않다.&lt;br /&gt;
더 분석해보고 적용한 뒤 글을 정리해 포스팅 해봐야겠다. 🕵🏻&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="ui" /><summary type="html">TL;DR</summary></entry><entry><title type="html">Jekyll에 검색 페이지 추가하기</title><link href="https://jamesu.dev/posts/2021/01/03/adding-search-page-on-jekyll/" rel="alternate" type="text/html" title="Jekyll에 검색 페이지 추가하기" /><published>2021-01-03T00:00:00+09:00</published><updated>2021-01-03T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/03/adding-search-page-on-jekyll</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/03/adding-search-page-on-jekyll/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;검색 기능으로 &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search&quot; target=&quot;_blank&quot;&gt;Simple-Jekyll-Search&lt;/a&gt;
라이브러리를 사용하면, Jekyll에 간단한 검색 기능을 추가할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;블로그에 글을 올리다 보니 간혹 내가 필요한 정보를 찾고 싶을 때 찾을 수 없는 치명적인 문제가 있었다.
그래서 검색 기능의 필요성을 절실히 느꼈고, 어떻게 구현하면 좋을지 컨셉을 고민했다.
현재 블로그의 형태 특성상 검색창이 항상 보이는 것보다 &lt;strong&gt;검색 기능에만 집중할 수 있는 검색 페이지&lt;/strong&gt;를 구현해야겠다는 결론에 도달했다.&lt;/p&gt;

&lt;p&gt;이제 방법을 생각해야 하는데, 정적 사이트 특성상 데이터를 위한 별도의 서버를 가지고 있지 않기 때문에
일반적인 서비스의 구현하고 다른 방식의 관점으로 접근해야 했다.
검색할 데이터를 미리 준비하고, 해당 데이터에서 원하는 항목을 검색한 후 보여줘야겠다고 생각했다.&lt;/p&gt;

&lt;p&gt;마침 &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search&quot; target=&quot;_blank&quot;&gt;Simple-Jekyll-Search&lt;/a&gt;라는
말그대로 심플한 컨셉의 Jekyll 검색 기능을 위한 오픈 소스 라이브러리가 있었다.
내가 생각했던 것처럼 JSON 파일 형식으로 미리 데이터를 준비하고, 해당 파일로부터 원하는 항목을 검색해 정보로 조립하는 것이었다.
작성일 기준 1.1K 개의 별을 가지고 있을 만큼 신뢰성이 어느 정도 있었기 때문에 바로 사용하기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;simple-jekyll-search-연동하기&quot;&gt;Simple-Jekyll-Search 연동하기&lt;/h2&gt;

&lt;p&gt;나는 여러가지 방법 중에 직접 필요한 부분만 블로그에 넣는 방식으로 연동을 진행했다.
결국에는 Jekyll의 빌드 과정과 JavaScript의 로직을 통해 검색 기능이 구현되는 것이기 때문에 관련한 것만 잘 연동한다면,
최소한의 파일만 사용해서 원하는대로 동작 구현이 가능하다.&lt;/p&gt;

&lt;p&gt;연동에 앞서 오픈 소스 라이브러리를 사용할 때 가장 이해하기 쉬운 방법이
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/tree/master/example&quot; target=&quot;_blank&quot;&gt;예제&lt;/a&gt;와
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/wiki&quot; target=&quot;_blank&quot;&gt;가이드&lt;/a&gt;를 보는 것이라 생각한다.
연동 과정이 이해가 가지 않는 경우, 앞의 링크를 참고해 실제 코드와 가이드를 보면서 동작 방식을 이해한다면 더 수월하게 연동을 할 수 있을 것이다.&lt;/p&gt;

&lt;h3 id=&quot;1-필요한-파일-넣기&quot;&gt;1. 필요한 파일 넣기&lt;/h3&gt;

&lt;p&gt;원하는 기능에 따라 필요한 파일은 다를 수 있지만, 기본적으로 다음과 같은 파일만 있으면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;simple-jekyll-search.min.js&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;simple-jekyll-search.js&lt;/code&gt;
(&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/tree/master/example/js&quot; target=&quot;_blank&quot;&gt;링크&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;search.json&lt;/code&gt;
(&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/blob/master/example/search.json&quot; target=&quot;_blank&quot;&gt;링크&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JavaScript 파일은 검색 데이터로부터 &lt;strong&gt;검색 기능&lt;/strong&gt;을 사용하기 위한 라이브러리 파일이고,
JSON 파일은 검색 대상이 되는 &lt;strong&gt;검색 데이터&lt;/strong&gt;를 준비하기 위한 파일이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*.min.js&lt;/code&gt; 파일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; 파일의 압축 버전이라 보면 된다.&lt;br /&gt;
동일한 로직으로 구현되어 있기 때문에 어느 쪽을 사용해도 무관하다.
만약 커스터마이징을 하고 싶은 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;*.min.js&lt;/code&gt; 파일을 수정하는 것은 매우 난감하기 때문에
&lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; 파일을 사용하는 것을 추천한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;simple_search_filter.rb&lt;/code&gt;와 같은 플러그인은 왜 추가하지 않는지 의문이 있을 수 있다.
해당 코드를 보면 함수 몇가지를 정의해 놓았는데, 해당 함수를 사용하지 않으며 필수적으로 필요하지도 않기 때문에 첨부하지 않았다.&lt;/p&gt;

&lt;h3 id=&quot;2-검색-데이터-준비&quot;&gt;2. 검색 데이터 준비&lt;/h3&gt;

&lt;p&gt;Jekyll로 만든 블로그는 정적 사이트이기 때문에 검색을 하기 위해 미리 생성된 데이터가 필요하다.
(물론, 별도의 서버를 가지고 있거나 데이터를 준비하는 곳이 있다면 상관 없다.)
이를 위해 예제 프로젝트에 있는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;search.json&lt;/code&gt; 파일&lt;/strong&gt;이 필요하다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;---
layout: none
---
[
  {% for post in site.posts %}
    {
      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,
      &quot;category&quot; : &quot;{{ post.category }}&quot;,
      &quot;tags&quot;     : &quot;{{ post.tags | join: ', ' }}&quot;,
      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,
      &quot;date&quot;     : &quot;{{ post.date }}&quot;
    } {% unless forloop.last %},{% endunless %}
  {% endfor %}
]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;해당 파일을 보면 위와 같이 되어 있는데, &lt;strong&gt;Jekyll의 Liquid 문법으로 JSON 데이터를 생성&lt;/strong&gt;하는 것을 볼 수 있다.
전체 포스트를 순회하며 제목, 카테고리, 태그, URL, 날짜 등을 객체로 구성해 배열로 만든다.
따라서 Jekyll로 사이트를 생성할 때 검색 데이터가 JSON 배열로 준비된다.&lt;/p&gt;

&lt;p&gt;검색 대상이 되길 원하는 항목이 더 있다면, JSON과 Liquid 문법에 맞춰 추가하면 검색 대상에 포함된다.&lt;br /&gt;
참고로 현재 구현된 검색 페이지에 사용되는 JSON 파일은 다음과 같다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;---
layout: none
---
[
  {% for post in site.posts %}
    {
      &quot;title&quot;      : {{ post.title | jsonify }},
      &quot;categories&quot; : &quot;{{ post.categories | join: ' &amp;gt; ' }}&quot;,
      &quot;tags&quot;       : &quot;{{ post.tags | join: ', ' }}&quot;,
      &quot;date&quot;       : &quot;{{ post.date | date: '%Y.%m.%d' }}&quot;,
      &quot;urlString&quot;  : &quot;{{ post.url }}&quot;,
      &quot;url&quot;        : &quot;{{ post.url | prepend: site.baseurl }}&quot;
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이처럼 검색되길 원하는 문자열로 구성해 데이터를 준비할 수 있도록 한다.&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;urlString&lt;/code&gt;의 경우, 추후 사용되는 목적이 있어 추가로 넣었다.)&lt;/p&gt;

&lt;h3 id=&quot;3-검색-부분-레이아웃-구성&quot;&gt;3. 검색 부분 레이아웃 구성&lt;/h3&gt;

&lt;p&gt;검색 기능을 위해 일반적으로 &lt;strong&gt;검색어 입력&lt;/strong&gt;을 위한 입력 부분과 &lt;strong&gt;검색 결과&lt;/strong&gt;를 보여주기 위한 출력 부분이 필요하다.
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/blob/master/example/_layouts/default.html&quot; target=&quot;_blank&quot;&gt;예제 프로젝트&lt;/a&gt;에서는
&lt;code class=&quot;highlighter-rouge&quot;&gt;search-demo-container&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; 요소 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;search-input&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 요소를 입력 부분으로,
&lt;code class=&quot;highlighter-rouge&quot;&gt;results-container&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; 요소를 출력 부분으로 사용하고 있다.&lt;/p&gt;

&lt;p&gt;일반적으로 그것과 동일하게 사용하면 된다.&lt;br /&gt;
참고로 현재 구현된 검색 페이지에 사용되는 레이아웃은 꾸미는 것을 가미해 다음과 같이 작성했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;common-header search&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fas fa-search fa-fw&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-input&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;tabindex=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;spellcheck=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Search&quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-results&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;예제 프로젝트와 비슷하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;search-input&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 요소를 입력 부분으로,
&lt;code class=&quot;highlighter-rouge&quot;&gt;search-results&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; 요소를 출력 부분으로 사용하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;4-검색-기능-연동&quot;&gt;4. 검색 기능 연동&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/blob/master/example/_layouts/default.html&quot; target=&quot;_blank&quot;&gt;예제 프로젝트&lt;/a&gt;의
하단 부분을 보면, 다음과 같이 JavaScript 코드가 작성되어 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}/js/simple-jekyll-search.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simpleJekyllSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleJekyllSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;searchInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resultsContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;results-container&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{{ site.baseurl }}/search.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;searchResultTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;{url}?query={query}&quot; title=&quot;{desc}&quot;&amp;gt;{title}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;noResultsText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;No results found&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fuzzy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;simple-jekyll-search.min.js&lt;/code&gt; 파일을 불러와 사용하고 있으며, 해당 파일을 어디에 두었냐에 따라 경로는 변경될 수 있다.
또한, 편의를 위해 전체 JavaScript 파일을 불러오는 곳에서 해당 파일을 불러와도 된다.&lt;/p&gt;

&lt;p&gt;검색 기능을 연동하기 위해 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleJekyllSearch&lt;/code&gt; 객체를 생성해 &lt;code class=&quot;highlighter-rouge&quot;&gt;window.simpleJekyllSearch&lt;/code&gt;에 할당&lt;/strong&gt;해야 한다.
그 이후부터는 전달한 옵션에 따라 검색 기능이 작동하게 된다.&lt;/p&gt;

&lt;p&gt;여기서 가장 중요한 부분은 필수 옵션을 정확히 세팅해야 한다는 것이다.&lt;br /&gt;
헷갈리는 것이 있다면, &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/wiki&quot; target=&quot;_blank&quot;&gt;가이드&lt;/a&gt;를 참고해
세팅하길 바란다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;searchInput&lt;/code&gt;: 입력 부분에 해당하는 요소&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resultsContainer&lt;/code&gt;: 출력 부분에 해당하는 요소&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;: 검색 대상이 되는 검색 데이터가 있는 JSON 파일&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultTemplate&lt;/code&gt;: 검색된 항목이 출력 부분에 표시되는 레이아웃.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; 안에 JSON 객체의 Key를 입력해 검색된 데이터를 맵핑한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고로 현재 구현된 검색 페이지에 사용되는 JavaScript 코드는 다음과 같다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pointColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPropertyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--point-color&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simpleJekyllSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleJekyllSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;searchInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resultsContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-results&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{{ site.baseurl }}/assets/json/search-data.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;searchResultTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`
      &amp;lt;li&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-folder fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot;&amp;gt;{categories}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-book fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot;&amp;gt;{title}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-tags fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot;&amp;gt;{tags}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-calendar-alt fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot;&amp;gt;{date}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-link fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot; style=&quot;font-size: 1rem;&quot;&amp;gt;{urlString}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/li&amp;gt;
    `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;templateMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lowerCaseValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lowerCaseValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;noResultsText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simpleJekyllSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;기본적인 것은 예제 프로젝트와 동일하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultTemplate&lt;/code&gt; 옵션이 복잡해지고, &lt;code class=&quot;highlighter-rouge&quot;&gt;templateMiddleware&lt;/code&gt; 옵션이 추가되었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultTemplate&lt;/code&gt; 옵션은 검색 결과에 아이콘을 추가해 꾸미기 위해 복잡해졌고,
&lt;code class=&quot;highlighter-rouge&quot;&gt;templateMiddleware&lt;/code&gt; 옵션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultTemplate&lt;/code&gt;에 검색된 데이터가 맵핑되기 전에 수행할 변환 작업을 위해 사용되었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;templateMiddleware&lt;/code&gt; 옵션에 사용되는 함수의 로직이 굉장히 복잡해 보이는데,
그 목적은 &lt;strong&gt;검색어에 해당하는 부분을 강조 표시하기 위한 용도&lt;/strong&gt;이다.
더불어 실제 검색 대상이 되는 항목(제목, 카테고리, 태그 등)만 강조 표시를 하도록 로직을 추가했다.
그 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;검색 페이지 구현 결과&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-검색-페이지-추가&quot;&gt;5. 검색 페이지 추가&lt;/h3&gt;

&lt;p&gt;마지막으로 구성한 레이아웃과 구현한 JavaScript 코드를 원하는 곳에 넣고 페이지로 추가하면 된다.
이것은 예제 프로젝트에는 없는 부분으로, 다른 페이지를 구성하던 방식과 동일하게 페이지를 추가할 수 있다.&lt;/p&gt;

&lt;p&gt;현재 구현된 검색 페이지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;search.html&lt;/code&gt; 파일에 HTML 레이아웃과 JavaScript 코드를 모두 넣고, &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; 디렉터리에 포함시켰다.
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;_pages&lt;/code&gt; 디렉터리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;search.md&lt;/code&gt; 파일을 만들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt;를 작성했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;search&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Search&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/search&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제 해당 레이아웃은 검색 페이지로 생성될 것이다.
나머지 할 작업은 (Search 메뉴처럼) 원하는 곳에 해당 URL을 연결해 진입하도록 하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Simple&lt;/strong&gt;-Jekyll-Search라는 이름에 걸맞게 정말 &lt;strong&gt;간단한&lt;/strong&gt; 검색 기능만 제공하는 라이브러리라 원하는 동작을 구현하는데 어려움이 많았다.
그래도 나름 적정선에 스스로 합의(?)를 해서 검색 기능 구현이 마무리된 것 같다.
그리고 기능 구현을 하면서 &lt;a href=&quot;https://jamesu.dev/posts/2020/12/26/til-19-contribution-for-simple-jekyll-search-oss/&quot; target=&quot;_blank&quot;&gt;해당 라이브러리의 버그를 찾아 MR도 시도&lt;/a&gt;해봤고, 실제 받아들여지기까지 하여 재밌는 경험이었다.&lt;/p&gt;

&lt;p&gt;결론적으로 원하는 글을 찾는 데는 문제 없는 수준이 된 것 같아 꽤나 만족스럽지만, 공대 감성의 디자인을 한 것은 어쩔 수 없는 것 같다. 🤔&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="jekyll" /><category term="javascript" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 20: 2020년 회고</title><link href="https://jamesu.dev/posts/2021/01/01/til-20-2020-retrospective/" rel="alternate" type="text/html" title="TIL 20: 2020년 회고" /><published>2021-01-01T00:00:00+09:00</published><updated>2021-01-01T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/01/til-20-2020-retrospective</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/01/til-20-2020-retrospective/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub 연속 일일 커밋은 나름 성공적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;232&lt;/code&gt;일째 진행중이다.&lt;/li&gt;
  &lt;li&gt;TIL은 &lt;code class=&quot;highlighter-rouge&quot;&gt;개발 일기&lt;/code&gt;로 생각하고 많이 분발해 작성하자.&lt;/li&gt;
  &lt;li&gt;작년의 프로젝트는 모두 만족스럽고 재밌었다.
    &lt;ul&gt;
      &lt;li&gt;Objective-C to Swift 포팅&lt;/li&gt;
      &lt;li&gt;iOS/Android 앱 디자인 리뉴얼&lt;/li&gt;
      &lt;li&gt;사내 iOS 공통 라이브러리 개발&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;올해의 프로젝트에 iOS 개발 트렌드를 반영하자.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;iOS 디자인 패턴: &lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CI/CD&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;iOS에 집중해 &lt;code class=&quot;highlighter-rouge&quot;&gt;깊이가 깊은 iOS 개발자&lt;/code&gt;가 되자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;today-i-committed&quot;&gt;Today I Committed&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/github_2020_contributions.png&quot; alt=&quot;GitHub 2020 Contributions&quot; width=&quot;100%&quot; /&gt;
&lt;em&gt;GitHub Contributions in 2020&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GitHub를 사용하면서 개인적인 성취감을 위해 일일 커밋을 4월 초부터 시작했다.
그러다 4월 11일에 한 번 구멍이 생기고, 5월 13일에 한 번 더 구멍이 생기면서…
2020년의 연속 일일 커밋은 아쉽게 &lt;strong&gt;232일째&lt;/strong&gt;로 끝이 났다.&lt;/p&gt;

&lt;p&gt;일일 커밋은 하루 한 줄이라도 코드를 작성하면서 그 감을 잃지 않고 꾸준함을 유지하려는 목적으로 시작했다.
약속이 있는 날, 바쁜 날 등처럼 일일 커밋을 하기 힘든 날에도 계속 신경써서 연속 일일 커밋을 유지한 나에게 작은 칭찬을 하고 싶다.&lt;/p&gt;

&lt;p&gt;이제는 일일 커밋이 매일 떠오를 정도로 습관이 몸에 배어 2021년에도 실수하지만 않으면 연속 일일 커밋을 할 수 있을 것 같다.
2021년에는 4월 11일, 5월 13일과 같은 구멍이 발생하지 않도록 조심하며, 꾸준히 신기록을 갱신하고 싶다.&lt;br /&gt;
2021년의 Contributions에는 초록색으로 가득차길 바라며, 오늘도 나는 커밋 잔디를 심는다… 🌱&lt;/p&gt;

&lt;h2 id=&quot;today-i-learned-but&quot;&gt;Today I Learned, but…&lt;/h2&gt;

&lt;p&gt;5월에는 &lt;strong&gt;TIL&lt;/strong&gt;에 관심이 생기면서 TIL을 일일 커밋 겸 작성하려고 했으나… 매일 글을 쓰는 게 나에게는 너무 어려웠다.
&lt;strong&gt;일일 배움&lt;/strong&gt;이라는 마음가짐으로 TIL을 시작했기에 무엇이라도 배운 것이 있을 때 그것에 대해 작성했고, 생각보다 소재 고갈이 잦았다.
(물론, 배운 것이 있었지만 글로 안 쓴 것도 많다… 🤔)&lt;/p&gt;

&lt;p&gt;TIL 작성은 &lt;strong&gt;6월 이후부터 12월이 되기 전까지는 전무&lt;/strong&gt;했고, 일일 커밋은 주로 원래 하던 문제 풀이를 통해 진행했다.
아무래도 글쓰기가 익숙하지 않아서 그런지 (많이 어렵지 않은) 문제 풀이가 글쓰기보다는 쉬웠다.
글을 고치는 게 잦아서 글쓰기에 많은 시간이 들어가고, 새로운 문장을 생각해내는 것도 어려웠다.&lt;/p&gt;

&lt;p&gt;사실 내 TIL의 원래 취지는 &lt;strong&gt;기록&lt;/strong&gt;하는 것에 초점이 맞춰 있는 &lt;strong&gt;개발 일기&lt;/strong&gt;에 가깝다.
그 초점에 맞추지 않고 TIL을 작성하다 보니 배가 산으로 간 것 같다.
“정성 가득 길게 글을 쓰는 것보다는 무엇을 배웠는 지를 기록하는 것이 목표이므로 앞으로는 그 부담을 덜고 작성했으면 좋겠다.”
라고 2021년의 나에게 말하고 싶다. 🙄&lt;/p&gt;

&lt;h2 id=&quot;today-i-worked&quot;&gt;Today I Worked&lt;/h2&gt;

&lt;p&gt;재작년에는 서버와 웹 프론트엔드 유지보수가 주 업무였다면, 작년은 모바일 업무에 집중할 수 있었던 해였다.
모바일 개발자로 입사했기에 모바일 업무에 집중하는 것이 맞지만 어찌저찌 다른 업무를 맡았어서 모바일 업무만 하고 싶다고 강력 어필 했었다.
결과적으로 4분기에 서버를 잠시 했었지만, 모바일에 집중 할 수 있어 좋았다.&lt;/p&gt;

&lt;p&gt;작년의 대표적인 모바일 성과로는 &lt;strong&gt;Objective-C to Swift 포팅, iOS/Android 앱 디자인 리뉴얼, 사내 iOS 공통 라이브러리 개발&lt;/strong&gt;이 있다.
Swift 포팅은 자진해서 진행했던 프로젝트이고, 앱 디자인 리뉴얼은 전면 개편이라 내부 구조도 바꿔가며 손이 많이 갔다.
마지막으로 사내 iOS 공통 라이브러리 개발은 자주 쓰는 뷰나 기능 등을 모아 라이브러리로 만드는 작업으로 현재 진행형이다.&lt;/p&gt;

&lt;h3 id=&quot;objective-c-to-swift-포팅&quot;&gt;Objective-C to Swift 포팅&lt;/h3&gt;

&lt;p&gt;사내에 Objective-C로 되어 있는 앱들이 있어 유지보수가 매우 힘들었고, 그리하여 효율화를 위해 자진해서 Swift 포팅 프로젝트를 추진했다.
앱 하나에 대해서만 진행했으며, 기존 앱에 요구사항이 덜 적용된 부분도 있어 전체적으로 품질 향상의 효과도 있었다.
디자인 개선도 같이 진행해서 Swift 포팅을 하며 새로 만드는 것이 오히려 더 수월했다.
야근을 많이 해서 힘들었지만, &lt;strong&gt;두 언어의 차이를 느끼며 여러가지를 비교할 기회가 되어 아주 만족스러웠던 프로젝트였다&lt;/strong&gt;. 🙂&lt;/p&gt;

&lt;h3 id=&quot;iosandroid-앱-디자인-리뉴얼&quot;&gt;iOS/Android 앱 디자인 리뉴얼&lt;/h3&gt;

&lt;p&gt;디자인 리뉴얼은 앱 하나의 디자인 전체를 개편하는 작업이라 거의 모든 소스를 건드려야 했다.
그 과정에서 내부 구조도 많이 개선시키면서 두 플랫폼의 요구사항이 맞지 않는 것을 맞춰가는 작업까지 진행했다.
iOS와 안드로이드 모두를 맡다 보니 힘들었지만,
&lt;strong&gt;내부 구조를 분석하면서 어떻게 하면 효율적으로 구조화 할 수 있을지 두 플랫폼 모두에 대해 고민 할 수 있어 큰 경험이 됐다&lt;/strong&gt;.
그래도 앞으로는 주 업무는 iOS만 하고 싶다. 🤔&lt;/p&gt;

&lt;h3 id=&quot;사내-ios-공통-라이브러리-개발&quot;&gt;사내 iOS 공통 라이브러리 개발&lt;/h3&gt;

&lt;p&gt;사내 iOS 공통 라이브러리 개발은 새 앱을 개발하거나 기존 앱을 개선할 때 효율적으로 프로젝트를 진행하고자 추진한 프로젝트다.
앞으로 만들 새 앱에 대한 일관성 있는 디자인과 기능을 적용하고자 디자인 팀과 빈번하게 의사소통하며 요구사항을 정리했다.
커스터마이징도 가능하게 만들면서 공통적인 부분만 추출해 구현하고자 노력했다.
&lt;strong&gt;앱을 만드는 관점과 달리 라이브러리를 만드는 관점에서 구현을 하다보니 두 관점이 많이 다르다는 것을 느낄 수 있었다&lt;/strong&gt;. 🙂&lt;/p&gt;

&lt;h2 id=&quot;tomorrow-i-will-learn&quot;&gt;Tomorrow I will Learn&lt;/h2&gt;

&lt;p&gt;여러 개발 분야의 트렌드는 모두 빠르게 바뀌고 발전하고 있다.
모바일 개발 트렌드 또한 새로운 것이 생겨나고 기존 것이 발전하고 있는데,
트렌드를 계속 접하고는 있으나 지금까지 제대로 프로젝트에 반영한 적은 없다.&lt;/p&gt;

&lt;p&gt;최근에 공부하던 모바일 개발 트렌드 중 특히 iOS 개발 트렌드는 &lt;strong&gt;RxSwift, iOS 디자인 패턴, CI/CD&lt;/strong&gt; 등이 있다.
나열한 목록들이 현재 가장 관심이 많고 적용하고 싶은 개발 트렌드에 해당한다.&lt;/p&gt;

&lt;h3 id=&quot;rxswift&quot;&gt;RxSwift&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot; target=&quot;_blank&quot;&gt;RxSwift&lt;/a&gt;는 비동기 및 이벤트 기반 프로그래밍을 지향하는
&lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot;&gt;ReactiveX&lt;/a&gt; 프로젝트의 Swift 버전이다.&lt;br /&gt;
ReactiveX 컨셉으로 프로그래밍을 하면 가독성, 안정성, 효율성 등과 같은
다양한 이점을 얻을 수 있어 개인적으로 가장 적용하고 싶은 트렌드이다.
RxSwift를 틈틈이 공부하고 있어,
&lt;strong&gt;추후 사내 iOS 공통 라이브러리에 Rx 버전을 구현하는 것과 실제 프로젝트에 적용하는 것을 생각하고 있다&lt;/strong&gt;.
굉장히 재밌는 프로그래밍이 될 것 같아 기대가 된다. 🔥&lt;/p&gt;

&lt;h3 id=&quot;ios-디자인-패턴&quot;&gt;iOS 디자인 패턴&lt;/h3&gt;

&lt;p&gt;iOS 디자인 패턴 또는 iOS 아키텍쳐라고도 불리는 이것은 앱의 코드 구성을 의미한다.
iOS의 기본은 MVC로 되어 있고,
이는 비효율적인 코드 구성을 낳기 때문에 사람들은 새로운 구성을 개발해 내었다.&lt;/p&gt;

&lt;p&gt;MVVM, MVP, VIPER, RIBs, ReactorKit 등과 같이 다양한 디자인 패턴이 있지만,
이 중에서 나는 RxSwift와 함께 자주 언급되는 패턴인 &lt;strong&gt;MVVM&lt;/strong&gt;을 프로젝트에 적용하고 싶다.
안드로이드에서도 RxJava, RxKotlin과 함께 자주 사용되는 패턴인 만큼 기본이 되는 패턴이라 생각한다.
일단, &lt;strong&gt;MVVM을 실제 프로젝트에 적용 해보는 방향으로 하고 나머지 패턴은 개인적으로 공부하며 고민해봐야겠다&lt;/strong&gt;. 🤔&lt;/p&gt;

&lt;h3 id=&quot;cicd&quot;&gt;CI/CD&lt;/h3&gt;

&lt;p&gt;CI/CD는 Continuous Integration(지속적 통합)을 뜻하는 CI와
Continuous Delivery(지속적 제공) 또는 Continuous Deployment(지속적 배포)를 뜻하는 CD를 합쳐 부르는 말이다.
이 프로세스는 서버와 웹 프론트엔드 개발에서는 자주 사용하는 프로세스로 모바일 개발에서도 적용한 사례가 꽤 있을 것이다.&lt;/p&gt;

&lt;p&gt;현재 사내 앱 배포는 모든 과정을 사람이 수동으로 진행하고 있어 여러모로 비효율적일 수 있다.
CI/CD를 적용하면 이런 과정이 자동화되므로,
수동 배포 과정에서 발생하는 실수도 방지하고, 배포 과정에 크게 신경을 쓸 필요 없이 그 결과에 대해서만 대응하면 된다.
주 업무가 되는 것에 일을 집중할 수 있으므로 생산성 향상이 기대될 수 있다.&lt;/p&gt;

&lt;p&gt;사내 앱 배포에 CI/CD를 적용하는 것이 적합한 것인가에 대해서는 더 고민할 필요가 있긴 하다.
앞으로 개발자가 더 많아지고, 유닛 테스트가 잘 작성되어진다면, 그 효율성은 체감할 수 있는 수준이 될 것 같다.
&lt;strong&gt;기회가 된다면, &lt;a href=&quot;https://fastlane.tools/&quot; target=&quot;_blank&quot;&gt;Fastlane&lt;/a&gt;을 iOS와 안드로이드 모두에 적용해 프로세스를 개선하고 싶다&lt;/strong&gt;. 🤔&lt;/p&gt;

&lt;h2 id=&quot;tomorrow-i-will-become&quot;&gt;Tomorrow I will Become&lt;/h2&gt;

&lt;p&gt;2021년 올해는 개인적으로 많은 성장을 바라는 해이다.&lt;br /&gt;
작년에는 모바일 개발에 집중할 수 있었지만, 트렌드를 적용 못하고 사내 앱 개편에만 신경을 썼었다.&lt;br /&gt;
올해는 트렌드도 적용해가며 iOS 개발의 깊이를 더해가고 싶다.&lt;/p&gt;

&lt;p&gt;올해의 가장 큰 목표는 &lt;strong&gt;깊이가 깊은 iOS 개발자&lt;/strong&gt;가 되는 것이다.&lt;br /&gt;
그 깊이의 기준은 정할 수 없지만, 스스로 열심히 했다고 생각이 들 정도로 노력을 해보자. 🔥&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="idea" /><summary type="html">TL;DR</summary></entry></feed>